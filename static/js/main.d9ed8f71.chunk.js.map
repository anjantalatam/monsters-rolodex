{"version":3,"sources":["components/card/Card.jsx","components/cardList/CardList.jsx","components/searchBox/SearchBox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","src","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","useState","setMonsters","searchField","setSearchField","useEffect","fetch","then","response","json","users","filteredMonsters","filter","toLowerCase","includes","e","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAGe,SAASA,EAAT,GAA4B,IAAZC,EAAW,EAAXA,QAC7B,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAQG,GAAlC,0BACHC,IAAI,KAEN,6BAAKJ,EAAQK,OACb,mBAAGJ,UAAU,iBAAb,SAA+BD,EAAQM,W,MCP9B,SAASC,EAAT,GAAiC,IAAbC,EAAY,EAAZA,SACjC,OACE,qBAAKP,UAAU,YAAf,SACGO,EAASC,KAAI,SAACT,GAAD,OACZ,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQG,S,MCLZ,SAASO,EAAT,GAAmD,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aAC/C,OACE,uBACEC,KAAK,SACLZ,UAAU,SACVU,YAAaA,EACbG,SAAUF,ICuBDG,MA3Bf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNR,EADM,KACIS,EADJ,OAEyBD,mBAAS,IAFlC,mBAENE,EAFM,KAEOC,EAFP,KAIbC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAWR,EAAYQ,QAC9B,IAEH,IAAMC,EAAmBlB,EAASmB,QAAO,SAAC3B,GAAD,OACvCA,EAAQK,KAAKuB,cAAcC,SAASX,EAAYU,kBAOlD,OACE,sBAAK3B,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,8BACA,cAAC,EAAD,CAAWU,YAAY,iBAAiBC,aAPvB,SAACkB,GACpBX,EAAeW,EAAEC,OAAOC,UAOtB,cAAC,EAAD,CAAUxB,SAAUkB,QCfXO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d9ed8f71.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\n\nexport default function Card({ monster }) {\n  return (\n    <div className=\"card-container\">\n      <img\n        src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}\n        alt=\"\"\n      />\n      <h2>{monster.name}</h2>\n      <p className=\"wrapOnOverflow\">{monster.email}</p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Card from \"../card/Card\";\nimport \"./CardList.css\";\n\nexport default function CardList({ monsters }) {\n  return (\n    <div className=\"card-list\">\n      {monsters.map((monster) => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./SearchBox.css\";\n\nexport default function SearchBox({ placeholder, handleChange }) {\n  return (\n    <input\n      type=\"search\"\n      className=\"search\"\n      placeholder={placeholder}\n      onChange={handleChange}\n    />\n  );\n}\n","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport CardList from \"./components/cardList/CardList\";\nimport SearchBox from \"./components/searchBox/SearchBox\";\n\nfunction App() {\n  const [monsters, setMonsters] = useState([]);\n  const [searchField, setSearchField] = useState(\"\");\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => setMonsters(users));\n  }, []);\n\n  const filteredMonsters = monsters.filter((monster) =>\n    monster.name.toLowerCase().includes(searchField.toLowerCase())\n  );\n\n  const handleChange = (e) => {\n    setSearchField(e.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Monsters Rolodex</h1>\n      <SearchBox placeholder=\"Search Monster\" handleChange={handleChange} />\n      <CardList monsters={filteredMonsters} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}